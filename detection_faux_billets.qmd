---
title: "detection_faux_billets"
format: html
editor: visual
---

```{r}
new_data <- read.csv("data_raw/billets_production.csv", sep =",")
```


```{r}
head(new_data)
```

```{r}
# Extraire la colonne 'id' pour référence
ids <- new_data$id
```

```{r}
# Supprimer la colonne 'id' avant de faire des prédictions
new_data <- new_data[, -which(names(new_data) == "id")]
```

```{r}
# Normaliser les données si nécessaire (utiliser les statistiques de l'entraînement)
# Par exemple, avec scale (supposons que c'est ce que vous aviez fait)
new_data_scaled <- scale(new_data)
```


```{r}
# Charger le modèle ajusté et le seuil optimal
reg_log_model <- readRDS("modele_regression_logistique.rds")
best_threshold <- readRDS("seuil_optimal.rds")
```

```{r}
# Faire des prédictions de probabilités sur de nouvelles données
predicted_prob_new <- predict(reg_log_model, new_data, type = "response")
```

```{r}
# Appliquer le seuil optimal pour classer les probabilités
final_predictions <- ifelse(predicted_prob_new > best_threshold, "True", "False")
```

```{r}
# Afficher les prédictions
print(final_predictions)
```

```{r}
table(final_predictions)
```
```{r}
# Associer les identifiants de billets avec les prédictions
vertict <- data.frame(id = ids, is_genuine = final_predictions)

print(vertict)
```


ou


```{r}
# Charger le modèle sauvegardé (réseau neuronal)
model <- load_model_hdf5("model_faux_billets.h5")

```

```{r}
# Faire des prédictions sur le nouveau jeu de données
predictions <- model %>% predict(new_data_scaled)

# Convertir les probabilités en classes (0 ou 1)
predicted_class <- ifelse(predictions > 0.5, "True", "False")

# Afficher les résultats
print(predicted_class)

```

```{r}
# Associer les identifiants de billets avec les prédictions
results <- data.frame(id = ids, is_genuine = predicted_class)

# Afficher ou sauvegarder les résultats dans un fichier CSV
write.csv(results, "prediction_results.csv", row.names = FALSE)

print(results)

```

